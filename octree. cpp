// Created by andre on 6/23/2025.
//
#ifndef OCTREE_OCTREE_CPP
#define OCTREE_OCTREE_CPP

#include <vector>
#include <cstdlib>
#include <string>
#include <functional>
#include <array>

using namespace std;

template<typename T>
class Octree {
public:
    struct Point3D {
        double x, y, z;
        Point3D(double x,double y, double z):x(x),y(y),z(z){}
     
        bool operator==(Point3D& o){ return (x==o.x && y==o.y && z==o.z); }
    };

    struct BoundingBox {
        Point3D center;
        double halfSize;
        BoundingBox(const Point3D& c, double hs): center(c), halfSize(hs) {}
        bool contains(const Point3D& p)  {
            return ((center.x - halfSize) <= p.x && p.x <= (center.x + halfSize)) &&
                   ((center.y - halfSize) <= p.y && p.y <= (center.y + halfSize)) &&
                   ((center.z - halfSize) <= p.z && p.z <= (center.z + halfSize));
        }
    };

    struct Node {
        BoundingBox boundary;
        vector<pair<Point3D, vector<T>>> points;
        array<Node*,8> children{};
        bool isLeaf = true;

        Node(const BoundingBox& b): boundary(b) {}
        Node() = default;
    };

    Node* root;
    size_t density;
    int maxDepth;

    Octree(const BoundingBox& boundary, size_t capacity = 8, int maxDepth = 8)
            : density(capacity), maxDepth(maxDepth) {
        root = new Node(boundary);
    }


    bool insert(Point3D& p, T& value) {
        if (!root->boundary.contains(p)) return false;
        return insert(root, p, value, 0);
    }

    bool remove(Point3D& p, T* value = nullptr) {
        if (!root->boundary.contains(p)) return false;
        Node* it = root;
        int index;
        while (!it->isLeaf) {
            index = nearest_child(p, it->children);
            it = it->children[index];
        }
        auto point=it->points.begin();
        while(point!=it->points.end() and !(point->first==p))point++;

        if(point==it->points.end()) return false;
        if (value==nullptr){it->points.erase(point); return true;}

        for(auto val=point->second.begin(); val!=point->second.end();val++){
            if(*val==*value){ point->second.erase(val); return true;}
        }
        return false;

    }

    vector<T> find(Point3D& p) {
        if (!root->boundary.contains(p)) return {};
        Node* it = root;
        int index;
        while (!it->isLeaf) {
            index = nearest_child(p, it->children);
            it = it->children[index];
        }
        for (auto& pr : it->points) {
            if (pr.first == p)
                return pr.second;
        }
        return {};
    }

    void clear() {}
    size_t size() { return {}; }
    int max_depth() {
        return maxDepth;
    }

    ~Octree() {
        destroy(root);
    }

    void traverse(const function<void(const Node*)>& fn) {
        traverse(root, fn);
    }


private:
    void destroy(Node* node) {
        if (!node) return;
        for (Node* child : node->children) {
            destroy(child);
            delete child;
        }
    }

    void traverse(Node* node, const function<void(const Node*)>& fn) {
        if (!node) return;
        fn(node);
        if (!node->isLeaf) {
            for (Node* child : node->children) {
                traverse(child, fn);
            }
        }
    }


    void subdivide(Node* node) {    //solo se llama cuando se crean varios puntos mas no cuando se insertan varios valores en un solo punto
        node->isLeaf = false;
        Point3D c = node->boundary.center;
        double hf = node->boundary.halfSize / 2;

        node->children[0] = new Node(BoundingBox(Point3D{ c.x + hf, c.y + hf, c.z + hf },hf));
        node->children[1] = new Node(BoundingBox(Point3D{ c.x - hf, c.y + hf, c.z + hf },hf));
        node->children[2] = new Node(BoundingBox(Point3D{ c.x + hf, c.y - hf, c.z + hf },hf));
        node->children[3] = new Node(BoundingBox(Point3D{ c.x + hf, c.y + hf, c.z - hf },hf));
        node->children[4] = new Node(BoundingBox(Point3D{ c.x - hf, c.y - hf, c.z + hf },hf));
        node->children[5] = new Node(BoundingBox(Point3D{ c.x - hf, c.y + hf, c.z - hf },hf));
        node->children[6] = new Node(BoundingBox(Point3D{ c.x + hf, c.y - hf, c.z - hf },hf));
        node->children[7] = new Node(BoundingBox(Point3D{ c.x - hf, c.y - hf, c.z - hf },hf));
        for (int i = node->points.size() - 1; i >= 0; --i) {
            auto pr = node->points[i];
            for(T& v:pr.second){
                insert(node,pr.first,v,0);
            }
        }
    }

    bool insert(Node* node, Point3D& p, T& value, int depth) {
        if (depth >= maxDepth) return false;
        if (!node->isLeaf) {
            int index = nearest_child(p, node->children);
            return insert(node->children[index], p, value, depth + 1);
        }
        for (auto& pr : node->points) {
            if (pr.first == p) {
                pr.second.push_back(value);
                return true;
            }
        }
        node->points.push_back({p, vector<T>(1, value)});
        if (node->points.size() > density)subdivide(node);
        return true;
    }



    int nearest_child(const Point3D& p, const array<Node*,8>& children) {
        int index = 0;
        int minDis = abs(children[0]->boundary.center.x - p.x) +
                     abs(children[0]->boundary.center.y - p.y) +
                     abs(children[0]->boundary.center.z - p.z);
        for (int i = 1; i < 8; ++i) {
            int currentDis = abs(children[i]->boundary.center.x - p.x) +
                             abs(children[i]->boundary.center.y - p.y) +
                             abs(children[i]->boundary.center.z - p.z);
            if (currentDis < minDis) {
                minDis = currentDis;
                index = i;
            }
        }
        return index;
    }

};

#endif //OCTREE_OCTREE_CPP
